<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patient Dashboard</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/patient.css">
</head>

<body>
    <nav>
        <div class="logo">Remote Patient Monitoring</div>
        <ul>
            <li><a href="/auth/logout">Logout</a></li>
        </ul>
    </nav>

    <section class="dashboard-container">
        <h1>Welcome, <%= user.fullname %>
        </h1>
        <p>Here you can view your health data and recent monitoring.</p>

        <h2>Start Health Monitoring</h2>

        <!-- Vücut Sıcaklığı Testi -->
        <button id="start-test-btn" class="test-btn" onclick="startBodyTempTest()">Start Temperature Test</button>

        <div id="test-instructions" class="instructions hidden">
            <h3>📢 Please Hold the Temperature Sensor!</h3>
            <p>Place the sensor in contact with your skin for 40 seconds.</p>
            <img src="/images/hand-sensor.png" alt="Hand Holding Sensor" class="instruction-image">
            <img src="/images/body-sensor.png" alt="Sensor on Body" class="instruction-image">
            <p id="countdown">40</p>
        </div>
        <p id="test-result" class="result"></p>
        <p id="temp-result"></p>

        <button id="start-spo2-btn" class="test-btn" onclick="startSpo2Test()">Start SpO₂ Test</button>
        <div id="spo2-instructions" class="instructions hidden">
            <h3>📢 Please Hold Your Finger on the SpO₂ Sensor!</h3>
            <p>Place your finger gently on the sensor and stay still.</p>
            <img src="/images/spo2-finger.png" alt="Finger on SpO₂ Sensor" class="instruction-image">
            <img src="/images/spo2-sensor.png" alt="SpO₂ Sensor Device" class="instruction-image">
        </div>
        <p id="spo2-result"></p>
        <p id="spo2-test-result"></p>

        <button id="start-ekg-btn" class="test-btn" onclick="startEKGTest()">Start EKG Test</button>
        <div id="ekg-instructions" class="instructions hidden">
            <h3>📢 Please Keep Your Hands Still on the EKG Sensors!</h3>
            <p>The test will take about 10-15 seconds.</p>
            <img src="/images/ekg-hands.png" alt="Hands on EKG Sensors" class="instruction-image">
            <img src="/images/ekg-device.png" alt="EKG Device" class="instruction-image">
        </div>
        <p id="ekg-test-result"></p>

        <button id="start-bp-btn" class="test-btn" onclick="startBPTest()">Start Blood Pressure Test</button>

        <div id="bp-instructions" class="instructions hidden">
            <h3>📢 Keep your hand steady on the sensors!</h3>
            <p>The test will take about 30 seconds. Please remain still.</p>
            <img src="/images/bp-sensor.png" alt="Blood Pressure Sensor" class="instruction-image">
        </div>
        <p id="bp-test-result"></p>
    </section>

    <section class="history-container">
        <h2>Test History</h2>
        <table id="test-history">
            <thead>
                <tr>
                    <th>Test Type</th>
                    <th>Result</th>
                    <th>Date</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td colspan="3">Loading...</td>
                </tr>
            </tbody>
        </table>
    </section>

    <section class="ekg-history-container">
        <h2>EKG Visualization</h2>

        <!-- Dropdown ile geçmiş testleri seçme -->
        <label for="ekg-select">Select EKG Test:</label>
        <select id="ekg-select">
            <option value="">Loading...</option>
        </select>

        <button id="view-ekg-btn">View EKG</button>

        <div id="ekg-container" class="hidden">
            <canvas id="ekgChart"></canvas>
        </div>
    </section>

    <script>
        let tempTestInProgress = false;
        let spo2TestInProgress = false;
        let ekgTestInProgress = false;

        // 📌 **Vücut Sıcaklığı Testi Başlat**
        function startBodyTempTest() {
            if (tempTestInProgress) return;
            tempTestInProgress = true;
            document.getElementById("test-instructions").classList.remove("hidden");
            document.getElementById("start-test-btn").disabled = true;
            let countdown = 40;
            let countdownElement = document.getElementById("countdown");
            document.getElementById("test-result").innerText = "⏳ Please hold the sensor for 40 seconds...";

            fetch('/api/measure-bodytemp', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        startCountdown();
                    } else {
                        document.getElementById("test-result").innerText = "❌ Measurement could not be started.";
                        resetBodyTempTest();
                    }
                })
                .catch(error => {
                    document.getElementById("test-result").innerText = "❌ Server error!";
                    resetBodyTempTest();
                });

            function startCountdown() {
                let timer = setInterval(() => {
                    countdown--;
                    countdownElement.innerText = countdown;
                    if (countdown <= 0) {
                        clearInterval(timer);
                        getBodyTempResult();
                    }
                }, 1000);
            }

            function getBodyTempResult(attempt = 0) {
                fetch('/api/get-bodytemp')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            document.getElementById("temp-result").innerText = `${data.temperature}°C`;
                            document.getElementById("test-result").innerText = `✅ Measurement completed: ${data.temperature}°C`;
                            resetBodyTempTest();
                        } else {
                            if (attempt < 10) {
                                setTimeout(() => getBodyTempResult(attempt + 1), 1000);
                            } else {
                                document.getElementById("test-result").innerText = "❌ Measurement failed. Please try again.";
                                resetBodyTempTest();
                            }
                        }
                    })
                    .catch(error => {
                        document.getElementById("test-result").innerText = "❌ Server error!";
                        resetBodyTempTest();
                    });
            }

            function resetBodyTempTest() {
                document.getElementById("test-instructions").classList.add("hidden");
                setTimeout(() => {
                    document.getElementById("start-test-btn").disabled = false;
                }, 3000);
                tempTestInProgress = false;
            }
        }

        // 📌 **SpO₂ Testi Başlat**
        function startSpo2Test() {
            if (spo2TestInProgress) return;
            spo2TestInProgress = true;
            document.getElementById("spo2-instructions").classList.remove("hidden");
            document.getElementById("start-spo2-btn").disabled = true;
            document.getElementById("spo2-test-result").innerText = "⏳ Measuring SpO₂... Please wait.";

            fetch('/api/measure-spo2', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        getSpo2Result();
                    } else {
                        document.getElementById("spo2-test-result").innerText = "❌ SpO₂ Measurement could not be started.";
                        resetSpo2Test();
                    }
                })
                .catch(error => {
                    document.getElementById("spo2-test-result").innerText = "❌ Server error!";
                    resetSpo2Test();
                });

            function getSpo2Result(attempt = 0) {
                fetch('/api/get-spo2')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            document.getElementById("spo2-result").innerText = `SpO₂: ${data.spo2}%`;
                            document.getElementById("spo2-test-result").innerText = `✅ Measurement completed: ${data.spo2}%`;
                            resetSpo2Test();
                        } else {
                            if (attempt < 15) {
                                setTimeout(() => getSpo2Result(attempt + 1), 1000);
                            } else {
                                document.getElementById("spo2-test-result").innerText = "❌ Measurement failed. Please try again.";
                                resetSpo2Test();
                            }
                        }
                    })
                    .catch(error => {
                        document.getElementById("spo2-test-result").innerText = "❌ Server error!";
                        resetSpo2Test();
                    });
            }

            function resetSpo2Test() {
                document.getElementById("spo2-instructions").classList.add("hidden");
                setTimeout(() => {
                    document.getElementById("start-spo2-btn").disabled = false;
                }, 3000);
                spo2TestInProgress = false;
            }
        }

        function startEKGTest() {
            if (ekgTestInProgress) return;
            ekgTestInProgress = true;

            document.getElementById("ekg-instructions").classList.remove("hidden");
            document.getElementById("start-ekg-btn").disabled = true;
            document.getElementById("ekg-test-result").innerText = "⏳ EKG measurement in progress...";

            fetch('/api/measure-ekg', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        getEKGResult();
                    } else {
                        document.getElementById("ekg-test-result").innerText = "❌ EKG Measurement could not be started.";
                        resetEKGTest();
                    }
                })
                .catch(error => {
                    document.getElementById("ekg-test-result").innerText = "❌ Server error!";
                    resetEKGTest();
                });

            function getEKGResult(attempt = 0) {
                fetch('/api/get-ekg')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            document.getElementById("ekg-test-result").innerText = "✅ EKG measurement completed! Check your test records.";
                            resetEKGTest();
                        } else {
                            if (attempt < 30) { // 🔥 **30 KEZ deneyecek, 30 saniyeye kadar bekleyecek**
                                setTimeout(() => getEKGResult(attempt + 1), 1000);
                            } else {
                                document.getElementById("ekg-test-result").innerText = "❌ EKG Measurement failed. Please try again.";
                                resetEKGTest();
                            }
                        }
                    })
                    .catch(error => {
                        document.getElementById("ekg-test-result").innerText = "❌ Server error!";
                        resetEKGTest();
                    });
            }

            function resetEKGTest() {
                document.getElementById("ekg-instructions").classList.add("hidden");
                setTimeout(() => {
                    document.getElementById("start-ekg-btn").disabled = false;
                }, 3000);
                ekgTestInProgress = false;
            }
        }

        let bpTestInProgress = false;

        function startBPTest() {
            if (bpTestInProgress) return;
            bpTestInProgress = true;

            document.getElementById("bp-instructions").classList.remove("hidden");
            document.getElementById("start-bp-btn").disabled = true;
            document.getElementById("bp-test-result").innerText = "⏳ Measuring blood pressure... Please wait.";

            fetch('/api/BP', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        getBPResult(); // ✅ **Ölçüm başladığında sonucu beklemeye başla**
                    } else {
                        document.getElementById("bp-test-result").innerText = "❌ BP Measurement could not be started.";
                        resetBPTest();
                    }
                })
                .catch(error => {
                    document.getElementById("bp-test-result").innerText = "❌ Server error!";
                    resetBPTest();
                });

            function getBPResult(attempt = 0) {
                fetch('/api/get-latest-bp')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            document.getElementById("bp-test-result").innerText = "✅ BP measurement completed. Check your test records.";
                            resetBPTest();
                        } else {
                            if (data.message === "BP measurement in progress.") {
                                if (attempt < 30) { // 30 saniyeye kadar bekle
                                    setTimeout(() => getBPResult(attempt + 1), 1000);
                                } else {
                                    document.getElementById("bp-test-result").innerText = "❌ BP Measurement timed out. Please try again.";
                                    resetBPTest();
                                }
                            } else {
                                document.getElementById("bp-test-result").innerText = "❌ " + data.message;
                                resetBPTest();
                            }
                        }
                    })
                    .catch(error => {
                        document.getElementById("bp-test-result").innerText = "❌ Server error!";
                        resetBPTest();
                    });
            }

            function resetBPTest() {
                document.getElementById("bp-instructions").classList.add("hidden");
                setTimeout(() => {
                    document.getElementById("start-bp-btn").disabled = false;
                }, 3000);
                bpTestInProgress = false;
            }
        }


        function loadTestHistory() {
            fetch('/api/test-history')
                .then(response => response.json())
                .then(data => {
                    const tableBody = document.querySelector("#test-history tbody");
                    tableBody.innerHTML = ""; // Önce temizle

                    if (data.success && data.history.length > 0) {
                        data.history.forEach(test => {
                            let formattedTestType = test.testType.toUpperCase(); // Varsayılan
                            let formattedResult = test.result; // Varsayılan

                            // 🔥 Test tipine göre uygun formatı belirle
                            if (formattedTestType === "SPO2") {
                                formattedTestType = "Oxygen Saturation SpO₂";
                                formattedResult = `${test.result}%`;
                            } else if (formattedTestType === "BODYTEMP") {
                                formattedTestType = "Body Temperature";
                                formattedResult = `${test.result}°C`;
                            }

                            const row = document.createElement("tr");
                            row.innerHTML = `
                        <td>${formattedTestType}</td>
                        <td>${formattedResult}</td>
                        <td>${new Date(test.createdAt).toLocaleString()}</td>
                    `;
                            tableBody.appendChild(row);
                        });
                    } else {
                        tableBody.innerHTML = `<tr><td colspan="3">No test history found.</td></tr>`;
                    }
                })
                .catch(error => {
                    console.error("❌ Test history load error:", error);
                    document.querySelector("#test-history tbody").innerHTML = `<tr><td colspan="3">Error loading history.</td></tr>`;
                });
        }


        // 📌 **Sayfa yüklendiğinde test geçmişini getir**
        document.addEventListener("DOMContentLoaded", loadTestHistory);
    </script>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="/js/EKG.js"></script>

</body>

</html>